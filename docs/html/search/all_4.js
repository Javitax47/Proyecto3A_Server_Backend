var searchData=
[
  ['get_0',['get',['../server_8js.html#af456caf07e1e5a2f26508522ebc3caa6',1,'get(&apos;/setup&apos;, async(req, res)=&gt; { try { await pool.query(` CREATE TABLE IF NOT EXISTS users(id SERIAL PRIMARY KEY, username VARCHAR(100) NOT NULL);CREATE TABLE IF NOT EXISTS sensors(id SERIAL PRIMARY KEY, type VARCHAR(100), value FLOAT, timestamp TIMESTAMP, user_id INTEGER REFERENCES users(id) ON DELETE CASCADE);`);res.status(200).send({ message:&quot;Successfully created users and sensors tables&quot; });} catch(err) { console.log(err);res.sendStatus(500);} }):&#160;server.js'],['../server_8js.html#ad58102be9bcb7f1ff2b7c6f5046c49ac',1,'get(&apos;/latest&apos;, async(req, res)=&gt; { try { const temperatureQuery=await pool.query(` SELECT *FROM sensors WHERE type=&apos;temperature&apos; ORDER BY timestamp DESC LIMIT 1 `);const co2Query=await pool.query(` SELECT *FROM sensors WHERE type=&apos;CO2&apos; ORDER BY timestamp DESC LIMIT 1 `);const responseData={ temperature:temperatureQuery.rows[0]||null, co2:co2Query.rows[0]||null };res.status(200).send(responseData);} catch(err) { console.log(err);res.sendStatus(500);} }):&#160;server.js'],['../server_8js.html#ae07be55edee34cae9dc3696c6a351366',1,'get(&apos;/&apos;, async(req, res)=&gt; { try { const sensorsQuery=await pool.query(&apos;SELECT *FROM sensors&apos;);const usersQuery=await pool.query(&apos;SELECT *FROM users&apos;);const responseData={ sensors:sensorsQuery.rows, users:usersQuery.rows };res.status(200).send(responseData);} catch(err) { console.log(err);res.sendStatus(500);} }):&#160;server.js']]]
];
